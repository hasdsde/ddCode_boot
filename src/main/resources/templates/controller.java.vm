package ${package.Controller};

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.List;

import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import ${package.Parent}.common.Result;
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import lombok.extern.slf4j.Slf4j;

import java.time.LocalDateTime;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * @author : hasd
 * @version 1.0.0
 * @since : ${date}
 **/

#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(tags = "${table.comment}")
@Slf4j
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end

@Resource
private ${table.serviceName} ${table.entityPath}Service;
@Resource
private ${table.mapperName} ${table.entityPath}Mapper;


/**
 * @param ${table.entityPath}
 * @return ${package.Parent}.common.Result
 * @Description 新增/修改${table.comment}
 * @author ${author}
 * @Date ${date}
 */
@PostMapping()
@ApiOperation("新增/修改${table.comment}")
@CacheEvict(cacheNames = "${table.entityPath}.page", allEntries = true)
public Result Save(@RequestBody ${entity} ${table.entityPath}) {

    if (${table.entityPath}.getId() == null){
        ${table.entityPath}.setCreatedAt(LocalDateTime.now());
    } else{
        ${table.entityPath}.setUpdatedAt(LocalDateTime.now());
    }
        ${table.entityPath}Service.saveOrUpdate(${table.entityPath});
    return Result.OK();
}


/**
 * @param id
 * @return ${package.Parent}.common.Result
 * @Description 根据id查询
 * @author ${author}
 * @Date ${date}
 */
@GetMapping("/{id}")
@ApiOperation("根据id查询")
@Cacheable(cacheNames = "${table.entityPath}.page", key = "#id")
public Result GetById(
        @PathVariable(value = "id") int id
) {
    ${entity} ${table.entityPath} =${table.entityPath}Service.getById(id);

    if (${table.entityPath}.getId() == null){
        return Result.OKWithMessage("结果不存在");
    }
    return Result.OKWithData(${table.entityPath});
}


/**
 * @param currentPage int
 * @param pageSize    int
 * @return ${package.Parent}.common.Result
 * @Description 分页查询
 * @author ${author}
 * @Date ${date}
 */
@GetMapping("/page")
@ApiOperation("分页查询")
public Result Get(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        @RequestParam(value = "pageSize", defaultValue = "10") int pageSize
) {
    Page<${entity}> page = ${table.entityPath}Service.selectPage(currentPage, pageSize);
    return Result.OKWithPageQuery(page);
}

/**
 * @param id int
 * @return ${package.Parent}.common.Result
 * @Description 根据id删除
 * @author ${author}
 * @Date ${date}
 */
@DeleteMapping("/{id}")
@ApiOperation("根据id删除")
@CacheEvict(cacheNames = "${table.entityPath}.page", allEntries = true)
public Result deleteById(
        @PathVariable(value = "id") int id
) {
        ${table.entityPath}Service.removeById(id);
    return Result.OK();
}



/**
 * @param id int
 * @return com.hasd.ddcodeboot.common.Result
 * @Description 根据id恢复
 * @author hasd
 * @Date 2023-12-19
 */
@DeleteMapping("/recover/{id}")
@ApiOperation("根据id恢复")
@CacheEvict(cacheNames = "${table.entityPath}.page", allEntries = true)
public Result recoverById(
        @PathVariable(value = "id") int id
) {
    UpdateWrapper<${entity}> wrapper = new UpdateWrapper<>();
    wrapper.eq("id", id).set("deleted_at", null);
        ${table.entityPath}Service.update(wrapper);
    return Result.OK();
}


/**
 * @param ids list<integer>
 * @return com.hasd.ddcodeboot.common.Result
 * @Description 批量删除
 * @author hasd
 * @Date 2023-12-19
 */
@DeleteMapping("/del/batch")
@ApiOperation("批量删除")
@CacheEvict(cacheNames = "${table.entityPath}.page", allEntries = true)
public Result deleteByIds(
        @RequestBody List<Integer> ids
) {
        ${table.entityPath}Service.removeBatchByIds(ids);
    return Result.OK();
}


/**
 * @param ids list<integer>
 * @return com.hasd.ddcodeboot.common.Result
 * @Description 标记删除
 * @author hasd
 * @Date 2023-12-19
 */
@DeleteMapping("/del/sign")
@ApiOperation("标记删除")
@CacheEvict(cacheNames = "${table.entityPath}.page", allEntries = true)
public Result deleteSignByIds(
        @RequestBody List<Integer> ids
) {
    QueryWrapper<Object> wrapper = new QueryWrapper<>();
    ids.forEach(id -> {
        ${entity} ${table.entityPath} =new ${entity}();
        ${table.entityPath}.setDeletedAt(LocalDateTime.now());
        ${table.entityPath}.setId(id);
            ${table.entityPath}Service.updateById(${table.entityPath});
    });
    return Result.OK();
}

}
#end

